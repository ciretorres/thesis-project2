/* autogenerated by Processing revision 1286 on 2024-06-08 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Prototype_v1 extends PApplet {





/*
 Title: Interactive-Interface
 Author: Eric Torres, @ciretorres 
 Description: Prototype
 Version: v1.0.0
 Update: 03/2021
*/
PeasyCam camera;

Star stars;

Grid globe;
Grid globe_1;

HeadsUpDisplay HUD;

String[] data;

boolean small = false;

int ratioGlobe = 100; // ratio in pixels

//int camDistance = 2500;
//int camDistance = 270;
//int camDistance = 1270;
//int camDistance = 70;
int camDistance = 80;

int total_stars = 183; // stars quantity

PImage asset, welcome, text_interface, instructions_1, instructions_2;

PImage app_mag_icon_enabled, abs_mag_icon_enabled, dist_mag_icon_enabled;
PImage app_mag_icon_focused, abs_mag_icon_focused, dist_mag_icon_focused, increase_icon_focused, decrease_icon_focused;
PImage arrow_down_icon, arrow_up_icon, help_icon;
PImage bg;

PFont font_1_black, font_1_bold, font_1_semibold, font_1_semibold_1, font_1_regular;
PFont font_2_extrabold, font_2_bold, font_2_semibold, font_2_medium, font_2_regular;

boolean up, down, plus, minus  = false;
boolean app_active, abs_active, dist_active, help, help_2  = false;
boolean print = false;
boolean show_dialog_controller = true;
boolean start_welcome = true;

int lookAtX, lookAtY, lookAtZ = 0;

PImage assets_0, assets_1, assets_2, assets_3, assets;

PFont Font1, Font1_Bold, Font1_Semibold, Font1_Extrabold; 
PFont Font2, Font3;

 public void setup() {
  /*  Configuraci√≥n
   */
  //size(displayWidth, displayHeight, P3D);
  //size(1366, 768, P3D); // SAMSUNG 32"
  //size(1280, 800, P3D); // ANDROID 8" or 15"
  //size(1024, 640, P3D);
  //size(1100, 700, P3D);
  /* size commented out by preprocessor */;
  orientation(LANDSCAPE);
  
  //frameRate(120);
  frameRate(60);
  //frameRate(30);
  /* smooth commented out by preprocessor */;  
  
  int baseColor = color(102);
  currentcolor = baseColor;
  
  // Define and create circle button
  int buttoncolor = color(204);
  int highlight = color(153);
  ellipseMode(CENTER);
  circle1 = new CircleButton((width/2)+255, (height/2)-255, 60, buttoncolor, highlight);
  
  circle2 = new CircleButton(width-87, height-390, 66, buttoncolor, highlight);
  
  circle3 = new CircleButton(85, height-211, 66, buttoncolor, highlight);
   
  circle4 = new CircleButton(186, height-211, 66, buttoncolor, highlight);
   
  circle5 = new CircleButton(290, height-211, 66, buttoncolor, highlight);
   
  circle6 = new CircleButton(240, height-295, 66, buttoncolor, highlight);
   
  circle7 = new CircleButton(135, height-295, 66, buttoncolor, highlight);
   
  circle8 = new CircleButton(186, height-110, 66, buttoncolor, highlight);
  
  // Define and create rectangular button
  rect1 = new RectButton((width/2)-290, (height/2)+130, 580, 70, buttoncolor, highlight);
  
  rect2 = new RectButton((width/2)-50, (height/2)+210, 100, 20, buttoncolor, highlight);
  
  rect3 = new RectButton((width/2)-290, (height/2)+210, 580, 70, buttoncolor, highlight);
  
  // FONTS
  font_1_black = createFont("fonts/Roboto/Roboto-Black.ttf", 16);
  font_1_bold = createFont("fonts/Roboto/Roboto-Bold.ttf", 32); 
  font_1_semibold = createFont("fonts/Roboto/Roboto-Medium.ttf", 64);
  font_1_semibold_1 = createFont("fonts/Roboto/Roboto-Medium.ttf", 32);
  font_1_regular = createFont("fonts/Roboto/Roboto-Regular.ttf", 16);
  
  font_2_extrabold = createFont("fonts/Baloo_Tamma_2/BalooTamma2-ExtraBold.ttf", 32);
  font_2_bold = createFont("fonts/Baloo_Tamma_2/BalooTamma2-Bold.ttf", 32); 
  font_2_semibold = createFont("fonts/Baloo_Tamma_2/BalooTamma2-SemiBold.ttf", 32);
  font_2_medium = createFont("fonts/Baloo_Tamma_2/BalooTamma2-Medium.ttf", 16);
  font_2_regular = createFont("fonts/Baloo_Tamma_2/BalooTamma2-Regular.ttf", 16);
  
  // ICONS
  app_mag_icon_enabled = loadImage("assets/1x/Artboard 48.png");
  abs_mag_icon_enabled = loadImage("assets/1x/Artboard 52.png");
  dist_mag_icon_enabled = loadImage("assets/1x/Artboard 56.png");
  
  app_mag_icon_focused = loadImage("assets/1x/Artboard 50.png");
  abs_mag_icon_focused = loadImage("assets/1x/Artboard 54.png");
  dist_mag_icon_focused = loadImage("assets/1x/Artboard 58.png");
  increase_icon_focused = loadImage("assets/1x/Artboard 65.png");
  decrease_icon_focused = loadImage("assets/1x/Artboard 61.png");
  
  arrow_down_icon = loadImage("assets/0.5x/Artboard 69@0.5x.png");
  arrow_up_icon = loadImage("assets/0.5x/Artboard 71@0.5x.png");
  help_icon = loadImage("assets/1x/Artboard 73.png");
  
  welcome = loadImage("assets/1x/welcome.png");
  
  instructions_1 = loadImage("assets/1x/instructions_1.png");
  instructions_2 = loadImage("assets/1x/instructions_2.png");  
  
  stars  = new Star(total_stars);
  
  camera = new PeasyCam(this, camDistance); // camera pixel's away
  camera.setRotations(-1.1f, -0.5f, 0);
  
  HUD = new HeadsUpDisplay();
  
  BufferedReader br;
  String line;
  
  try {    
    InputStream is = createInput("hip_100pc.csv");
    br = new BufferedReader(new InputStreamReader(is, "UTF-8"));    
    while((line=br.readLine())!=null){      
      //System.out.println(line);
      stars.parseDB(line); // <------- !
    }
  } catch (IOException e) {    
    System.out.println("IOException when trying to read sample.txt:\n"+e);
    System.exit(0);
  }
} // end setup

 public void draw() {  
  /* Dibujar 
  */
  background(0);  
  lights();  
  
  pushMatrix();  
  stars.render();  
  
  popMatrix();  
  
} // end draw

 public void keyPressed() {
  if (key == CODED) {
    if (keyCode == UP) {
      println("UP");
      camera.rotateX(-0.01f);
    }
    if (keyCode == DOWN) {
      println("DOWN");
      camera.rotateX(+0.01f);
    }
    if (keyCode == LEFT) {
      println("UP");
      camera.rotateY(-0.01f);
    }
    if (keyCode == RIGHT) {
      println("DOWN");
      camera.rotateY(+0.01f);
    }
  }
  
  if (key == ENTER) {
    println("ENTER");   
  }
  
  if (key == 'q') {    
    lookAtX = lookAtX -1; 
    camera.lookAt(lookAtX, lookAtY, lookAtZ);
  }  
  if (key == 'e') {    
    
    lookAtX = lookAtX +1; 
    camera.lookAt(lookAtX, lookAtY, lookAtZ);
  }  
  if (key == 'w') {    
    //cameraera.rotateY(+0.01);
    lookAtY = lookAtY +1; 
    camera.lookAt(lookAtX, lookAtY, lookAtZ);
  }  
  if (key == 's') {
    //camera.rotateY(-0.01);
    lookAtY = lookAtY -1; 
    camera.lookAt(lookAtX, lookAtY, lookAtZ);
  }  
  
  if(key == 'n'){    
    abs_active = false;
    dist_active = false;
    app_active = true;
  }
  if(key == 'm'){    
    app_active = false;
    dist_active = false;
    abs_active = true;
  }
  if(key == 'd'){    
    abs_active = false;
    app_active = false;
    dist_active = true;
  }
  
  if(key == '+'){
    up = true;
  } 
  if(key == '-'){   
    down = true;
  }  
  if(key == 'h'){    
    //help_active = false;
  }

} // end keyPressed

 public void mousePressed() {
  //println("x: ",mouseX," y: ",height-mouseY);
    
} // end mousePressed()
int currentcolor;

RectButton rect1, rect2, rect3, rect4;

CircleButton circle1, circle2, circle3, circle4, circle5, circle6, circle7, circle8;

boolean locked = false;

class Button{
  int x, y;
  int size;
  int size2;
  int basecolor, highlightcolor;
  int currentcolor;
  boolean over = false;
  boolean pressed = false;
  
   public void update(){
    if(over()){
      currentcolor = highlightcolor;
    } else {
      currentcolor = basecolor;
    }
  } // end update
  
   public boolean pressed(){
    if(over){
      locked = true;
      return true;
    } else {
      locked = false;
      return false;
    }
  } // end pressed
  
   public boolean over(){
    return true;
  } // end over
  
   public boolean overRect(int x, int y, int width, int height){
    if(mouseX >= x && mouseX <= x+width &&
      mouseY >= y && mouseY <= y+height){
      return true;
    } else {
      return false;
    }
  } // end overRect 
  
   public boolean overCircle(int x, int y, int diameter){
    float disX = x - mouseX;
    float disY = y - mouseY;
    if(sqrt(sq(disX) + sq(disY)) < diameter/2 ){
      return true;
    } else {
      return false;
    }
  } // end overCircle
  
} // end Button

class RectButton extends Button{
  RectButton(int ix, int iy, int isize, int isize2, int icolor, int ihighlight){
    x = ix;
    y = iy;
    size = isize;
    size2 = isize2;
    highlightcolor = ihighlight;
    currentcolor = basecolor;
  }
  
   public boolean over(){
    if(overRect(x, y, size, size2)){
      over = true;
      return true;
    } else {
      over = false;
      return false;
    }
  } // end over
  
   public void display(){
    stroke(255);
    fill(currentcolor);
    rect(x,y,size, size2);
  } // end display
  
} // RectButton

class CircleButton extends Button{ 
  CircleButton(int ix, int iy, int isize, int icolor, int ihighlight){
    x = ix;
    y = iy;
    size = isize;
    basecolor = icolor;
    highlightcolor = ihighlight;
    currentcolor = basecolor;
  }

   public boolean over(){
    if( overCircle(x, y, size) ){
      over = true;
      return true;
    } else {
      over = false;
      return false;
    }
  } // end over

   public void display(){
    stroke(255);
    fill(currentcolor);
    ellipse(x, y, size, size);
  } // end display
  
} // end CircleButton
class Grid{
  
  int total;
  int ratio;
  PVector[][] grid;
  
  Grid(){
    // Constructor
  }
  
  Grid(int radius){
    ratio = radius;
    total = 100; // pixel's resolution
    grid = new PVector[total+1][total+1];
    
    calculateGrid(ratio);
  }
  
   public void show(){
    /* Shows a Spherical Vectorial Grid
    */
    noFill();
    strokeWeight(1);
    stroke(255, 10);
    
    for(int i = 0; i < total; i++){
      beginShape(LINES);
      for(int j = 0; j < total; j++){
        // Assigns vector values to PVector vector1
        PVector vector1 = grid[i][j];
        PVector v1 = vector1;
        // Draws vertex
        vertex(v1.x, v1.y, v1.z);
        
        // Assigns vector values to PVector vector2
        PVector vector2 = grid[i+1][j];;
        PVector v2 = vector2;
        // Draws vertex
        vertex(v2.x, v2.y, v2.z);
      } // for
      endShape();
      
      beginShape();
      for(int j = 0; j < total+1; j++){
        // Assigns vector values to PVector vector3
        PVector vector3 = grid[i+1][j];
        PVector v3 = vector3;
        // Dibuja vertex
        vertex(v3.x, v3.y, v3.z);
      } // for
      endShape(CLOSE);
    } // for
    
  } // end render
  
   public void calculateGrid(float ratio){
    /* Converts 2D ecuatorial coordinates to 3D rectangular cartesian coordinates
    */    
    float r = ratio;
    
    for(int i = 0; i < total+1; i++){
      // Calculate 100 latitudes values from 0.0 * PI
      float pi = PI;
      float lat = map(i, 0, total, 0, pi);
      //println("\n-------");
      //println("Latitude: "+lat+" i :"+i+" pi:"+pi);
      
      for(int j = 0; j < total+1; j++){
        // For every latitude value, Calculate 100 longitudes values from 0.0 to TWO_PI
        float two_pi = TWO_PI;
        float lon = map(j, 0, total, 0, two_pi);
        //println("\nLongitude:"+lon+" i:"+i+" pi:"+two_pi);
        
        /* Formula for obtaining spheric dimensions values
           x = r sin(Œ∏) cos(Œ¶/œÜ)
           y = r sin(Œ∏) sin(Œ¶/œÜ)
           z = r cos(Œ∏)
        */
        float x = r * sin(lat) * cos(lon);
        float y = r * sin(lat) * sin(lon);
        float z = r * cos(lat);
        //println("X: "+x+", Y: "+y+", Z: "+z);
        
        // Assigns PVector(x,y,z) to bidimensional grid[][] array
        grid[i][j] = new PVector(x, y, z);
        //println("gridArray["+i+"]["+j+"]\n[ z:"+grid[i][j].x+" y:"+grid[i][j].y+" z:"+grid[i][j].z+" ]");
        
      } // for
    } // for
    
  } // end calculateGrid

} //----- end class
class HeadsUpDisplay{
  
  Star starInfo;
  
  HeadsUpDisplay(){
    // Constructor
  }
  
   public void show(int hip, float abs_mag, float app_mag, float distance, float ra_deg, float dec_deg, float x, float y, float z, float alpha){    
    /*  Esta funci√≥n renderea todo lo que se va a dibujar en main. Imprime la distancia de la c√°mara del centro.
    */
    camera.beginHUD();    
    /*Grid-System*/ 
    fill(255,0,0, 10);
    float w = (displayWidth / 12) - 20;
    //println("The width of each column: "+w);
    float x_axis = 40;
    for(int i = 0; i < 12; i++){
      //rect(x_axis,0,w,displayHeight);
      x_axis += w+18;
    }
    float h = (displayHeight / 10) - 20;
    //println("The width of each row: "+h);
    float y_axis = 40;
    for(int i = 0; i < 10; i++){
      //rect(0, y_axis, displayWidth,h);
      y_axis += h+16;
    }
    fill(255,0,0);
    //rect(width-118, height-422, 64, 64);
    
    dialog_controller();
    
    /* Retroalimenta la acci√≥n de incrementar y disminuir*/
    fill(255,255,255, 50);
    if(plus){
      ellipse(239, height-294, 64, 64);
      plus = !plus;
    } else {
      if(minus){
        ellipse(135, height-294, 64, 64);        
        minus = !minus;
      }
    }
    
    text_interface(hip, abs_mag, app_mag, distance, ra_deg, dec_deg, x, y, z, alpha);
    
    if(start_welcome){
      image(welcome, width/2, height/2);
    } else if(help){
      image(instructions_1, width/2, height/2);
    }     
    
    update(mouseX, mouseY);
    //rect1.display();
    //rect2.display(); 
    //rect3.display();    
    //circle1.display();
    //circle2.display();
    //circle3.display();
    //circle4.display();
    //circle5.display();
    //circle6.display();
    //circle7.display();
    //circle8.display();
    camera.endHUD();
  } // end show
  
   public void update(int x, int y){
    if(locked == false){
      rect1.update();
      rect2.update();
      rect3.update();    
      circle1.update();
      circle2.update();
      circle3.update();
      circle4.update();
      circle5.update();
      circle6.update();
      circle7.update();
      circle8.update();
    } else {
      locked = false;
    }
    
    if(mousePressed){
      if(circle1.pressed()) {
        if(help == true){
          start_welcome = false;
          help = false;
        }  
      } else if(circle2.pressed()) {
        help = true;
      } else if(circle3.pressed()) {
        if(show_dialog_controller){
          abs_active = false;
          dist_active = false;
          app_active = true;
          println("App_mag Pressed");
        }    
      } else if(circle4.pressed()) {
        if(show_dialog_controller){
          app_active = false;
          dist_active = false;
          abs_active = true;
          println("Abs_mag Pressed");
        }  
      } else if(circle5.pressed()) {
        if(show_dialog_controller){
          abs_active = false;
          app_active = false;
          dist_active = true;
          println("Dist Pressed");
        } 
      } else if(circle6.pressed()) {
        if(app_active || dist_active){
          up = true;
        }      
      } else if(circle7.pressed()) {
        if(app_active  || dist_active){
          down = true;        
        } 
      } else if(circle8.pressed()) {
        abs_active = false;
        app_active = false;
        dist_active = false;
        show_dialog_controller = !show_dialog_controller;
      } else if(rect1.pressed()){
        if(start_welcome == true){
          start_welcome = false;
        }
      } else if(rect2.pressed()){
        if(start_welcome == true){
          start_welcome = false;
          help = true;
        }                
      } else if(rect3.pressed()){
        if(help == true){
          start_welcome = false;
          help = false;
        }        
      } 
    } // end if
  } // end update
  
   public void text_interface(int hip, float abs_mag, float app_mag, float distance, float ra_deg, float dec_deg, float x, float y, float z, float alpha){
    /* Prints Information about the stars
    */
    imageMode(CORNER);
    
    //image(text_interface, width-322, height-462);    
    
    float[] r = camera.getRotations();
    float[] p = camera.getPosition();
    float[] look = camera.getLookAt();
    
    float ly = distance * 3.26f;
    
    fill(43,182,255,50);
    rect(width-320,height-460,320,460,25,0,0,0);
    imageMode(CENTER);
    image(help_icon, width-86, height-390);
    
    if(app_active){
      textFont(font_1_semibold);
      fill(88,230,16);
      text("Star",width-285,height-355);
      
      fill(66,173,12);
      textFont(font_1_semibold_1);
      text("selection",width-285,height-320);
      
      fill(255);
      textFont(font_1_black);
      text("HIP: "
        +"\nRight Ascension: "
          +"\nDeclination: "
            +"\n"
              +"\nABSmag: "
                +"\n"
                  +"\n          : "
                    +"\n\nAlpha: "
                      +"\n\nFrameRate: ", width-285, height-260);
                          //+"\nFrameCount: ", width-285, height-260);
        text(""+hip
          +"\n"+ra_deg
            +"\n"+dec_deg
              +"\n"
                +"\n"+abs_mag
                  +"\n"+ly+" ly"
                    +"\n"
                      +"\n\n"+alpha
                        +"\n\n"+frameRate, width-125, height-260);
                            //+"\n"+frameCount, width-125, height-260);                                  
      fill(43,182,255);
      if(small){
        text("APPmag: "
        +"\n\nDist/Sol: ", width-285, height-203);
        //+"\n\nDist/Sol: ", width-285, height-203);
        text(""+app_mag
          +"\n\n\n"+distance+" pc", width-125, height-203);
      } else {
        text("APPmag: "          
          +"\n\nDist/Sol: ", width-285, height-187);
        text(""+app_mag
          +"\n\n\n"+distance+" pc", width-125, height-187);
      }
      
    } else {
      if(abs_active){
        textFont(font_1_semibold);
        fill(88,230,16);
        text("Star",width-285,height-355);
        
        fill(66,173,12);
        textFont(font_1_semibold_1);
        text("selection",width-285,height-320);
        
        fill(255);
        textFont(font_1_black);
        text("HIP: "
          +"\nRight Ascension: "
            +"\nDeclination: "
              +"\nAPPmag:"
                +"\n"
                  +"\nDist/Sol:"
                    +"\n          : "
                      +"\n\nAlpha: "
                        +"\n\nFrameRate: ", width-285, height-260);
                            //+"\nFrameCount: ", width-285, height-260);
          text(""+hip
            +"\n"+ra_deg
              +"\n"+dec_deg
                +"\n"+app_mag
                  +"\n"
                    +"\n"+ly+" ly"
                      +"\n"+distance+" pc"
                        +"\n\n"+alpha
                          +"\n\n"+frameRate, width-125, height-260);
                              //+"\n"+frameCount, width-125, height-260);                                  
        
        fill(43,182,255);
        if(small){
          text("\nABSmag: ", width-285, height-203);
          text("\n"+abs_mag, width-125, height-203);
        } else {
          text("\nABSmag: ", width-285, height-187);
          text("\n"+abs_mag, width-125, height-187);
        }
        
      } else {
        if(dist_active){
          textFont(font_1_semibold);
          fill(88,230,16);
          text("Star",width-285,height-355);
          
          fill(66,173,12);
          textFont(font_1_semibold_1);
          text("selection",width-285,height-320);
          
          fill(255);
          textFont(font_1_black);
          text("HIP: "
            +"\nRight Ascension: "
              +"\nDeclination: "
                +"\n"
                  +"\nABSmag: "
                    +"\n"
                      +"\n          : "
                        +"\n\nAlpha: "
                          +"\n\nFrameRate: ", width-285, height-260);
                              //+"\nFrameCount: ", width-285, height-260);
            text(""+hip
              +"\n"+ra_deg
                +"\n"+dec_deg
                  +"\n"
                    +"\n"+abs_mag
                      +"\n"+ly+" ly"
                        +"\n"
                          +"\n\n"+alpha
                            +"\n\n"+frameRate, width-125, height-260);
                                //+"\n"+frameCount, width-125, height-260);                                  
          fill(43,182,255);
          if(small){
            text("APPmag: "
              +"\n\nDist/Sol: ", width-285, height-203);
            text(""+app_mag
              +"\n\n\n"+distance+" pc", width-125, height-203);
          } else {
            text("APPmag: "
              +"\n\nDist/Sol: ", width-285, height-187);
            text(""+app_mag
              +"\n\n\n"+distance+" pc", width-125, height-187);
          }
          
        } else {
          if(app_active == false && abs_active == false && dist_active == false){
            textFont(font_1_semibold);
            fill(88,230,16);
            text("Star",width-285,height-355);
            
            fill(66,173,12);
            textFont(font_1_semibold_1);
            text("selection",width-285,height-320);
            
            fill(255);
            textFont(font_1_black);
            text("HIP: "
              +"\nRight Ascension: "
                +"\nDeclination: "
                  +"\nAPPmag: "
                    +"\nABSmag: "
                      +"\nDist/Sol: "
                        +"\n          : "
                          +"\n\nAlpha: "
                            +"\n\nFrameRate: ", width-285, height-260);
                                //+"\nFrameCount: ", width-285, height-260);
              text(""+hip
                +"\n"+ra_deg
                  +"\n"+dec_deg
                    +"\n"+app_mag
                      +"\n"+abs_mag
                        +"\n"+ly+" ly"
                          +"\n"+distance+" pc"
                            +"\n\n"+alpha
                              +"\n\n"+frameRate, width-125, height-260);
                                  //+"\n"+frameCount, width-125, height-260);
                                
                
          }      
          
        }  
      }      
    }               
  } // end text_interface
  
   public void dialog_controller(){
    /* Builds the dialog controller
    */
    imageMode(CORNER);
    //image(asset, 40, height-240);
    imageMode(CENTER);    
    
    if(show_dialog_controller){
      image(arrow_down_icon, 187, height-100);
      
      if(app_active){
        image(increase_icon_focused, 239, height-295);
        image(decrease_icon_focused, 135, height-295);
        
        image(app_mag_icon_focused, 83, height-210);
        image(abs_mag_icon_enabled, 187, height-210);
        image(dist_mag_icon_enabled, 291, height-210);
      } else {
        if(abs_active){      
        image(app_mag_icon_enabled, 83, height-210);
        image(abs_mag_icon_focused, 187, height-210);
        image(dist_mag_icon_enabled, 291, height-210);  
        } else {
          if(dist_active){
            image(increase_icon_focused, 239, height-295);
            image(decrease_icon_focused, 135, height-295);
            
            image(app_mag_icon_enabled, 83, height-210);
            image(abs_mag_icon_enabled, 187, height-210);
            image(dist_mag_icon_focused, 291, height-210);
          } else {
            if(app_active == false && abs_active == false && dist_active == false){
              image(app_mag_icon_enabled, 83, height-210);
              image(abs_mag_icon_enabled, 187, height-210);
              image(dist_mag_icon_enabled, 291, height-210);
            }
          }
        }
      }
    } else {
      image(arrow_up_icon, 187, height-100);
    }
    
  } // end dialog_controller
  
   public void print_info(float hip, float abs_mag, float app_mag, float distance, float ra_deg, float dec_deg, float x, float y, float z, float alpha){
    //text("HIP: "+hip+"\nABSmag: "+abs_mag+"\nAPPmag: "+app_mag+"\nDist: "+distance+"\nra: "+ra_deg+"\ndec: "+dec_deg+"\nx: "+x+"\ny: "+y+"\nz: "+z+"\nalpha: "+alpha,10,10);  
  } // ennd print_info

} // end HeadsUpDisplay
class Star{  
  
  Star[] stars;
  String[] data;
  
  int hip;
  
  float ra_hms;
  float dec_dms;
  float app_mag;
  float abs_mag;
  float distance;
  float ra_deg;
  float dec_deg;
  float parallax;
  
  PVector starVector;
  float x;
  float y;
  float z;
  float alpha;
  
  int n = 0;
  
  Star(){
    // Constructor
  }
  
  Star(int total){
    stars = new Star[total];
    
  }
  
  Star(int h, float Vmag, float absMag, float parsecs, float RAdeg, float DEdeg, float Plx, PVector starVector){    
    
    hip = h;
    //ra_hms = RAhms;
    //dec_dms = DEdms;
    app_mag = Vmag;
    alpha = 128;
    
    abs_mag = absMag;
    distance = parsecs;
    
    ra_deg = RAdeg;
    dec_deg = DEdeg;
    parallax = Plx;
    
    starVector = starVector;
    x = normalize(starVector.x);
    y = normalize(starVector.y);
    z = normalize(starVector.z);   
    
  }
  
   public void render(){    
    /* Draws the geometrical representation
    */
    pushMatrix();    
    noStroke();    
    fill(255);    
    translate(0,0, 0);    
    
    sphere(1); // The sun    
    
    // Draws Star 181 HIP: 85665
    fill(stars[181].alpha);
    translate(stars[181].x, stars[181].y, stars[181].z);    
    sphere(1);
   
    // Reset the translate
    x = stars[181].x*-1;
    y = stars[181].y*-1;
    z = stars[181].z*-1;
    translate(x,y,z);
   
    /* Draws all stars*/
    for(int i = 1; i < stars.length; i++){      
            
      float x = stars[i].x*100;
      float y = stars[i].y*100;
      float z = stars[i].z*100;      
      
      translate(x,y,z);      
      
      if(i == 181){
        // do nothing
      } else {
        fill(255);
        sphere(1);
      }      
      
      // Reset the translate
      x = x*-1;
      y = y*-1;
      z = z*-1;
      translate(x,y,z);      
    } // end for
    
    // Shows Stars Info in HeadsUpDisplay
    HUD.show(stars[181].hip, stars[181].abs_mag, stars[181].app_mag,
      stars[181].distance, stars[181].ra_deg, stars[181].dec_deg,
        stars[181].x, stars[181].y, stars[181].z, stars[181].alpha);
        
    popMatrix();
    
    /* Modifies the Apparent Magnitude*/
    modifies_app_mag();
     
    /* Modifies the Distance*/
    modifies_distance();
    
    /* Modifies the Absolute Magnitude*/
    modify_abs_mag();
  } // end render
  
   public void increase_app_mag(int index){
    int i = index;
    plus = true;
      
    stars[i].app_mag = stars[i].app_mag + 1;
    // Re-Assigns Distance value
    stars[i].distance = distance(stars[i].abs_mag, stars[i].app_mag);
    
    // Convert spherical to cartesian with a new 3D calculate position value
    PVector starVector = spherical_to_cartesian(stars[i].ra_deg, stars[i].dec_deg, stars[i].distance);
    
    // Re-Assigns X, Y, Z values
    stars[i].x = normalize(starVector.x);
    stars[i].y = normalize(starVector.y);
    stars[i].z  = normalize(starVector.z);
    
    // Re-Assigns the new calculate alpha value
    stars[i].alpha = calculate_alpha(stars[i].app_mag);
    
    up = !up;
  } // end increase_app_mag
  
   public void decrease_app_mag(int index){
    int i = index;
    minus = true;
    
    stars[i].app_mag = stars[i].app_mag - 1;    
    
    // Re-Assigns Distance value
    stars[i].distance = distance(stars[181].abs_mag, stars[i].app_mag);
    
    // Convert spherical to cartesian with a new 3D calculate position value
    PVector starVector = spherical_to_cartesian(stars[i].ra_deg, stars[i].dec_deg, stars[i].distance);
    
    // Re-Assigns X, Y, Z values
    stars[i].x = normalize(starVector.x);
    stars[i].y = normalize(starVector.y);
    stars[i].z  = normalize(starVector.z);
    
    // Re-Assigns the new calculate Alpha value
    stars[i].alpha = calculate_alpha(stars[i].app_mag);
    
    down = !down;
  } // end decrease_app_mag
  
   public void modifies_app_mag(){
    // n de index de stars[n].app_mag y .distance
    int n = 181;
    
    if(up && app_active){
      // Increase Apparent Magnitud
      increase_app_mag(n);            
    } else {
      if(down && app_active){
        // Decrease Apparent Magnitud        
        decrease_app_mag(n);        
      }
    }
    
  } // end modifies_app_mag
  
   public void increase_distance(int index){
    int i = index;
    plus = true;
    println("Increase distance");      
    
    stars[i].distance = stars[i].distance + 1;      
    
    // Convert spherical to castesian with a new 3D calculate position values
    PVector starVector = spherical_to_cartesian(stars[i].ra_deg, stars[i].dec_deg, stars[i].distance);
    
    // Re-Assigns X, Y, Z values
    stars[i].x = normalize(starVector.x);
    stars[i].y = normalize(starVector.y);
    stars[i].z  = normalize(starVector.z);
    
    // Re-Assigns Apparent Magnitude value
    stars[i].app_mag = apparent_magnitude(stars[i].abs_mag, stars[i].distance);
    
    // Re-Assigns Alpha value
    stars[i].alpha = calculate_alpha(stars[i].app_mag);
    
    up = !up;
  } // end increase_distance
  
   public void decrease_distance(int index){
    int i = index;
    minus = true;
    println("Decrease distance");      
        
    // Limit minimun distance
    if(stars[i].distance < 1){
      stars[i].distance = stars[i].distance;
    } else {
      stars[i].distance = stars[i].distance -1;
    }                
    
    // Convert spherical to castesian with a new 3D calculate position values
    PVector starVector = spherical_to_cartesian(stars[i].ra_deg, stars[i].dec_deg, stars[i].distance);
    
    // Re-Assign vector(x, y, z) values
    stars[i].x = normalize(starVector.x);
    stars[i].y = normalize(starVector.y);
    stars[i].z  = normalize(starVector.z);
    
    // Re-Assigns Apparent Magnitude value
    stars[i].app_mag = apparent_magnitude(stars[i].abs_mag, stars[i].distance);
    
    // Re-Assigns Alpha value
    stars[i].alpha = calculate_alpha(stars[i].app_mag);
    
    down = !down;
  } // end decrease_distance
  
   public void modifies_distance(){
    // n de index de stars[n].app_mag y .distance
    int n = 181;
    
    if(up && dist_active){
      // Increase Distance
      increase_distance(n);            
    } else {
      if(down && dist_active){
        // Decrease Distance        
        decrease_distance(n);        
      }
    }
    
  } // end modifies_dist_mag
  
   public void modify_abs_mag(){
    
  } // end modify_abs_mag
  
   public float apparent_magnitude(float abs_mag, float distance){
    /* Obtains Apparent Magnitude from Absolute Magnitude and Distance in p√°rsecs
    */
    float m = log10(distance) * 5 - 5 + abs_mag;
    
    return m;
    
   } // end apparent_magnitude()
  
   public float distance(float abs_mag, float app_mag){
    /* Obtains Distance from Absolute Magnitude and Apparent Magnitude
    */
    float d = pow(10,(((app_mag-(abs_mag))+5)/5));
    
    return d;
    
  } // end distance()
  
   public float parallax_to_parsecs(float Plx){
    /* Converts Parallax to P√°rsecs
    */
    float pc = 1000/Plx;   
    
    return pc;
  } // end parallax_to_parsecs
  
   public float distance_modulus(float Vmag, float parsecs){
    /* Calculates Absolute Magnitude from Apparent Magnitude and Distance in p√°rsecs
    */
    float m = Vmag;
    float d = parsecs;
    
    float abs_mag = log10(d) * -5 + 5 + m; 
    
    return abs_mag;
  } // end distance_modulus
  
   public float log10(float x){
    /* Returns the logarithm of x with base 10
    */
    return (log(x) / log(10));
  } // end log
  
   public float calculate_alpha(float app_mag){
    /* Calculates alpha value
    */
    float alpha = ((128 * app_mag / 9.33f)-(128 * 2)) * -1; // <------------------------!
    
    if(alpha <= 0){
      alpha = 0;
    }
    
    return alpha;
    
  } // end calculate_alpha
  
   public void parseDB(String line){
    //System.out.println(line);
    
    String d = line;
    //System.out.println(d);
    
    String[] column = split(d, ',');
    //println(column[0], column[1], column[2], column[3], column[4]);
    //println(column[0]);
    
    int h = PApplet.parseInt(column[0]);
    float RAdeg = PApplet.parseFloat(column[1]);
    float DEdeg = PApplet.parseFloat(column[2]);
    float Vmag = PApplet.parseFloat(column[3]);
    float Plx = PApplet.parseFloat(column[4]);
    
    float parsecs = parallax_to_parsecs(Plx);
      
    float absMag = distance_modulus(Vmag, parsecs);
        
    PVector star_vector = spherical_to_cartesian(RAdeg, DEdeg, parsecs);
    
    //println(parsecs);
    
    if(h != 0 && n < 184){
      //println(n, h, Vmag, absMag, parsecs, RAdeg, DEdeg, Plx, star_vector);
      //print(n);
      stars[n-1] = new Star(h, Vmag, absMag, parsecs, RAdeg, DEdeg, Plx, star_vector);
    }
    n++;    
    
  } // end parseDB
  
   public PVector spherical_to_cartesian(float RAdeg, float DEdeg, float parsecs){
    /* Converts spherical polar coordinates to 3D rectangular cartesian coordinates
    
        Parameters
        ----------
        r : scalar, array_like, or `~astropy.units.Quantity`
            The radial coordinate (in the same units as the inputs).
        lat : scalar, array_like, or `~astropy.units.Quantity`
            The latitude (in radians if array or scalar)
        lon : scalar, array_like, or `~astropy.units.Quantity`
            The longitude (in radians if array or scalar)
    
        Returns
        -------
        x : float or array
            The first cartesian coordinate.
        y : float or array
            The second cartesian coordinate.
        z : float or array
            The third cartesian coordinate.
            
    */
    
    float r = parsecs;
    float lat = DEdeg;
    float lon = RAdeg;
    
    float x = r * cos(radians(lat)) * cos(radians(lon));
    float y = r * cos(radians(lat)) * sin(radians(lon));
    float z = r * sin(radians(lat));
    
    PVector v1 = new PVector(x, y, z);
    
    return v1;
    
  } // end spherical_to_cartesian
  
   public float normalize(float n){
    /* Scale the stellar distance from 1 p√°rsec to 100 pixels (1:100)
    */
    return n * 1;
  } // end normalize
  
  
} // end class


  public void settings() { fullScreen(P3D);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Prototype_v1" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
